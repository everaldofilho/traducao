<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 347912 Maintainer: ae Status: ready --><!-- CREDITS: narigone, ae, fabioluciano, geekcom -->
 <sect1 xml:id="language.oop5.abstract" xmlns="http://docbook.org/ns/docbook">
  <title>Abstração de Classes</title>

  <para>
   O PHP 5 introduz métodos e classes abstratas. Classes definidas como
   abstratas não podem ser instanciadas, e qualquer classe que
   contenha ao menos um método abstrato também deve ser abstrata. Métodos
   são definidos como abstratos declarando a intenção em sua assinatura - não podem
   definir a implementação.
  </para>

  <para>
   Ao herdar uma classe abstrata, todos os métodos marcados como abstratos na
   na declaração da classe pai devem ser implementados na classe filha; adicionalmente,
   estes métodos devem ser definidos com a mesma (ou menos restrita)
   <link linkend="language.oop5.visibility">visibilidade</link>. Por exemplo,
   se um método abstrato for definido como protegido, a implementação da função
   deve ser definida como protegida ou pública, mas não privada. Além disso,
   a assinatura do método deve coincidir, isso é, as induções de tipo e o número
   de argumentos exigidos devem ser os mesmos. Por exemplo, se a classe filha
   define um argumento opcional, e a assinatura do método abstrato não,
   há um conflito na assinatura. Também se aplica a construtores
   a partir do PHP 5.4. Em versões anteriores a 5.4, as assinaturas dos construtores poderiam ser diferentes.
  </para>

  <example>
   <title>Exemplo de classe abstrata</title>
    <programlisting role="php">
<![CDATA[
<?php
abstract class ClasseAbstrata
{
    // Força a classe que estende ClasseAbstrata a definir esse método
    abstract protected function pegarValor();
    abstract protected function valorComPrefixo( $prefixo );

    // Método comum
    public function imprimir() {
        print $this->pegarValor();
    }
}

class ClasseConcreta1 extends ClasseAbstrata
{
    protected function pegarValor() {
        return "ClasseConcreta1";
    }

    public function valorComPrefixo( $prefixo ) {
        return "{$prefixo}ClasseConcreta1";
    }
}

class ClasseConcreta2 extends ClasseAbstrata
{
    protected function pegarValor() {
        return "ClasseConcreta2";
    }

    public function valorComPrefixo( $prefixo ) {
        return "{$prefixo}ClasseConcreta2";
    }
}

$classe1 = new ClasseConcreta1;
$classe1->imprimir();
echo $classe1->valorComPrefixo('FOO_') ."\n";

$classe2 = new ClasseConcreta2;
$classe2->imprimir();
echo $classe2->valorComPrefixo('FOO_') ."\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ConcreteClass1
FOO_ConcreteClass1
ConcreteClass2
FOO_ConcreteClass2
]]>
   </screen>

  </example>
  <example>
   <title>Exemplo de classe abstrata</title>
    <programlisting role="php">
<![CDATA[
<?php
abstract class ClasseAbstrata
{
    // Esse método abstrato apenas define os argumentos requeridos
    abstract protected function prefixName($name);

}

class ClasseConcreta extends ClasseAbstrata
{

    // O método filho pode definir argumentos opcionais não presentes na assitura abstrata
    public function prefixName($name, $separator = ".") {
        if ($name == "Pacman") {
            $prefix = "Mr";
        } elseif ($name == "Pacwoman") {
            $prefix = "Mrs";
        } else {
            $prefix = "";
        }
        return "{$prefix}{$separator} {$name}";
    }
}

$class = new ClasseConcreta;
echo $class->prefixName("Pacman"), "\n";
echo $class->prefixName("Pacwoman"), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Mr. Pacman
Mrs. Pacwoman
]]>
   </screen>
  </example>

  <para>
   Códigos antigos que não possuem classes e funções com nome
   'abstract' podem ser executados sem modificações.
  </para>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
