<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 348403 Maintainer: fabioluciano Status: ready --><!-- CREDITS: diegopires, ae, diegopires, fabioluciano, geekcom -->

<sect1 xml:id="control-structures.continue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>continue</literal></title>
 <?phpdoc print-version-for="continue"?>
 <simpara>
  <literal>continue</literal> é utilizado em estruturas de laço para
  pular o resto da iteração atual, e continuar a execução
  na validação da condição e, então, iniciar a próxima iteração.
 </simpara>
 <note>
  <simpara>
   No PHP a instrução
   <link linkend="control-structures.switch">switch</link> é
   considerada uma estrutura de laço para os propósitos do
   <literal>continue</literal>. O <literal>continue</literal> se comporta como o
   <literal>break</literal> (quando nenhum argumento é passado), mas irá
   gerar um aviso, pois este é susceptível de ser um erro. Se um
   <literal>switch</literal> está dentro de um laço,
   <literal>continue 2</literal> irá continuar a próxima interação
   do laço externo.
  </simpara>
 </note>
 <simpara>
  O <literal>continue</literal> aceita um argumento numérico opcional
  que diz quantos níveis de laços aninhados deve pular.
  O valor padrão é <literal>1</literal>, saltando
  para o final do laço atual.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
foreach ($arr as $key => $value) {
    if (!($key % 2)) { // pula membros pares
        continue;
    }
    do_something_odd($value);
}

$i = 0;
while ($i++ < 5) {
    echo "Outer<br />\n";
    while (1) {
        echo "Middle<br />\n";
        while (1) {
            echo "Inner<br />\n";
            continue 3;
        }
        echo "This never gets output.<br />\n";
    }
    echo "Neither does this.<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Omitir o ponto e vírgula depois do <literal>continue</literal> pode causar
  confusão. Abaixo está um exemplo do que não se deve fazer.
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
for ($i = 0; $i < 5; ++$i) {
    if ($i == 2)
        continue
    print "$i\n";
}
?>
]]>
   </programlisting>
   <para>
    O resultado esperado poderia ser:
   </para>
   <screen>
<![CDATA[
0
1
3
4
]]>
   </screen>
   <para>
    mas em versões do PHP inferiores a 5.4.0, o script imprimirá:
   </para>
   <screen>
<![CDATA[
2
]]>
   </screen>
   <para>
    porque todo o código <literal>continue print "$i\n";</literal> é avaliado
    como uma só expressão, então o <function>print</function> é chamado somente
    quando <literal>$i == 2</literal> for verdadeiro. (O retorno do
    <literal>print</literal> é passado para o <literal>continue</literal> como o
    argumento numérico.)
   </para>
   <note>
    <para>
     A partir do PHP 5.4.0, o exemplo acima irá causar um
     erro do tipo <constant>E_COMPILE_ERROR</constant>.
    </para>
   </note>
  </informalexample>
 </para>
 <para>
  <table>
   <title>Lista de modificações do <literal>continue</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.3.0</entry>
      <entry>
       <literal>continue</literal> dentro de um <literal>switch</literal> que está tentando agir como um <literal>break</literal> para o
       <literal>switch</literal> irá gerar um <constant>E_WARNING</constant>.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       <literal>continue</literal> fora de um laço ou fora de uma estrutura de controle
       <literal>switch</literal> agora é detectado em tempo de compilação, antes era em tempo de execução,
       e dispara um erro do tipo <constant>E_COMPILE_ERROR</constant>.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       <literal>continue 0;</literal> não é mais válido. Em versões anteriores era interpretado
       como <literal>continue 1;</literal>.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Removida a possibilidade de passar variáveis como argumentos numéricos
       (ex., <literal>$num = 2; continue $num;</literal>).
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
