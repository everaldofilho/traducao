<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 345048 Maintainer: fabioluciano Status: ready --><!-- CREDITS: fabioluciano, geekcom -->

<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>foreach</literal></title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  O construtor <literal>foreach</literal> fornece uma maneira fácil de
  iterar sobre arrays. O <literal>foreach</literal> funciona somente em arrays
  e objetos, e emitirá um erro ao tentar usá-lo em uma variável
  com um tipo de dado diferente ou em uma variável não inicializada. Possui
  duas sintaxes:
  <informalexample>
   <programlisting>
<![CDATA[
foreach (array_expression as $value)
    statement
foreach (array_expression as $key => $value)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  A primeira forma, itera sobre arrays informados na
  <literal>array_expression</literal>. A cada iteração, o valor
  do elemento atual é atribuído a <literal>$value</literal> e
  o ponteiro interno do array avança uma posição (então, na próxima
  iteração, se estará olhando para o próximo elemento).
 </simpara>
 <simpara>
  A segunda forma var, adicionalmente, atribuir a chave do elemento corrente a
  variável <literal>$key</literal> a cada iteração.
 </simpara>
 <simpara>
  É possível
  <link linkend="language.oop5.iterations">customizar a iteração em objetos</link>.
 </simpara>
 <para>
  <note>
   <para>
    No PHP 5, quando o <literal>foreach</literal> inicia sua primeira execução, o
    ponteiro interno do array é automaticamente redefinido para o primeiro
    elemento. Isso indica que não é necessário chamar a função <function>reset</function>
    antes de um laço <literal>foreach</literal>.
   </para>
   <para>
    Como o <literal>foreach</literal> depende do ponteiro interno do array no PHP
    5, modificá-lo dentro de um laço pode levar a comportamentos inesperados.
   </para>
   <para>
    No PHP 7, o <literal>foreach</literal> não utiliza o ponteiro interno
    do array.
   </para>
  </note>
 </para>
 <para>
  Para modificar diretamente elementos de um array dentro de um laço, preceda
 <literal>$value</literal> com  &amp;. Neste caso, o valor será atribuído por
 <link linkend="language.references">referência</link>.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr is now array(2, 4, 6, 8)
unset($value); // break the reference with the last element
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <warning>
  <para>
   A referência ao <literal>$value</literal> e o último elemento do array
   permanecerá inalterado mesmo após a iteração do <literal>foreach</literal>.
   É recomendado destruí-lo utilizando a função <function>unset</function>.
   Caso contrário você experienciará o seguinte comportamento:
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$arr = array(1, 2, 3, 4);
foreach ($arr as &$value) {
    $value = $value * 2;
}
// $arr is now array(2, 4, 6, 8)

// sem um unset($value), $value continuará como referência ao último item: $arr[3]

foreach ($arr as $key => $value) {
    // $arr[3] será atualizado com cada valor de $arr...
    echo "{$key} => {$value} ";
    print_r($arr);
}
// ...até que, o segundo e último valor é copiado para o último valor

// saída:
// 0 => 2 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 2 )
// 1 => 4 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 4 )
// 2 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
// 3 => 6 Array ( [0] => 2, [1] => 4, [2] => 6, [3] => 6 )
?>
]]>
   </programlisting>
  </informalexample>
 </warning>
 <para>
  Em versões anteriores ao PHP 5.5.0, a referência a <literal>$value</literal> só é possível se o array iterado puder ser
  referenciado (isso é, se ele for uma variável). O código a seguir só funcionará em versões do PHP superiores a 5.5.0:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
foreach (array(1, 2, 3, 4) as &$value) {
    $value = $value * 2;
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  <note>
   <para>
    O <literal>foreach</literal> não possui suporte a habilidade
    de suprimir mensagens de erro utilizando o '@'.
   </para>
  </note>
 </para>
 <para>
  Mais alguns exemplos para demonstrar o uso:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* foreach example 1: value only */

$a = array(1, 2, 3, 17);

foreach ($a as $v) {
    echo "Current value of \$a: $v.\n";
}

/* foreach example 2: value (with its manual access notation printed for illustration) */

$a = array(1, 2, 3, 17);

$i = 0; /* for illustrative purposes only */

foreach ($a as $v) {
    echo "\$a[$i] => $v.\n";
    $i++;
}

/* foreach example 3: key and value */

$a = array(
    "one" => 1,
    "two" => 2,
    "three" => 3,
    "seventeen" => 17
);

foreach ($a as $k => $v) {
    echo "\$a[$k] => $v.\n";
}

/* foreach example 4: multi-dimensional arrays */
$a = array();
$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach ($a as $v1) {
    foreach ($v1 as $v2) {
        echo "$v2\n";
    }
}

/* foreach example 5: dynamic arrays */

foreach (array(1, 2, 3, 4, 5) as $v) {
    echo "$v\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <sect2 xml:id="control-structures.foreach.list">
  <title>Desempacotando arrays aninhados com o construtor list()</title>
  <?phpdoc print-version-for="foreach.list"?>

  <para>
   O PHP 5.5 adicionou a habilidade de iterar sobre array de arrays e desempacotar
   arrays aninhados em variáveis do laço fornecendo o construtor <function>list</function>
   como valor.
  </para>

  <para>
   Por exemplo:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a, $b)) {
    // $a contains the first element of the nested array,
    // and $b contains the second element.
    echo "A: $a; B: $b\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A: 1; B: 2
A: 3; B: 4
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Pode-se se fornecer menos elementos ao construtor <function>list</function> aos que
   existem no array aninhado, neste caso, os valores do array que sobrarem serão
   ignorados.

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a)) {
    // Note that there is no $b here.
    echo "$a\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1
3
]]>
    </screen>
   </informalexample>
  </para>

  <para>
   Um aviso será gerado se não houver elementos suficientes no array para o preenchimento
   do construtor <function>list</function>:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a, $b, $c)) {
    echo "A: $a; B: $b; C: $c\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[

Notice: Undefined offset: 2 in example.php on line 7
A: 1; B: 2; C:

Notice: Undefined offset: 2 in example.php on line 7
A: 3; B: 4; C:
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>

 <sect2 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        <literal>foreach</literal> não utiliza mais o o ponteiro interno do array.
       </entry>
      </row>
      <row>
       <entry>5.5.0</entry>
       <entry>
        Referências a <literal>$value</literal> são suportadas em expressões.
        Em versões anteriores, apenas variáveis eram suportadas.
       </entry>
      </row>
      <row>
       <entry>5.5.0</entry>
       <entry>
        Desempacotar arrays aninhados com a função <function>list</function> é suportado.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
